#ifndef GPIODEFS_H
#define GPIODEFS_H

#ifdef __cplusplus
  extern "C" {
#endif

/*
File auto-generated by m-gen v1.1                  
   (see https://github.com/Leopardus4/m-gen )     

DO NOT EDIT THIS FILE!                            
Please edit apprioritate .gm file and run m-gen   

*/

/*

This file contains macros for access LED1.
To change gpio to another, edit .gm file and run m-gen

*/




//------------------------------------------------------------------------//

/* MainButton - PD2 - active low input with internal pull-up resistor 
	 	Big red button on motherboard
 */

#define MainButton_asInput()    do{DDRD &= ~(1<<PD2); PORTD |= (1<<PD2);} while(0)

#define MainButton_isActive()   ( (PIND & (1<<PD2)) == 0 )

#define MainButton_isInactive() ( (PIND & (1<<PD2)) != 0 )


//------------------------------------------------------------------------//

/* LED1 - PD3 - active low output 
	 	Torch emulator...
 */

#define LED1_asOutput()   do{DDRD |= (1<<PD3);} while(0)

#define LED1_On()         do{PORTD &= ~(1<<PD3);} while(0)

#define LED1_Off()        do{PORTD |= (1<<PD3);} while(0)


//------------------------------------------------------------------------//



/*

Description:

m-gen creates set of macros for each gpio.                 
It depends on gpio mode from .gm file.                     
                                                           
                                                           
                                                           
                                                           
 [ #define gpio_enableAccess() ]                           
       This macro is present only on some platforms.       
       If present, it's used to i. e. turn on gpio clock   
       (it's common for all gpio,                          
        and MUST be used before any other macros)          
                                                           
                                                           
                                                           
Macros for 1 pin:  (abc - symbolic pin name from .gm file) 
                                                           
digital Input (i):                                         
                                                           
   #define abc_dirIn()     - initializing gpio as input    
                                                           
   #define abc_isHigh()    + testing state of gpio         
                           | i. e.:                        
   #define abc_isLow()     + if( abc_isHigh() ) {code}     
                                                           
                                                           
                                                           
digital Output (o):                                        
                                                           
   #define abc_dirOut()    - initializing gpio as output   
                                                           
   #define abc_setHigh()   + changing state of gpio        
                           | (high/low)                    
   #define abc_setLow()    +                               
                                                           
       It's required to use setHigh() or setLow() macro    
       after dirOut(), because state of gpio is unknown.   
                                                           
                                                           
                                                           
digital input and output (d):                              
                                                           
 [ #define abc_init() ]    - present only on some platforms
       It initializes pin as gpio                          
       (and i. e. disables pull-up)                        
       If present, should be used before any operations    
       on this gpio.                                       
       It's required to use dirIn() or dirOut()            
       after init(), because direction is unknown.         
                                                           
   #define abc_dirIn()     +                               
   #define abc_dirOut()    |   As described above          
                           |                               
   #define abc_isHigh()    |                               
   #define abc_isLow()     |                               
                           |                               
   #define abc_setHigh()   |                               
   #define abc_setLow()    +                               
                                                           
                                                           
                                                           
active low / active high output (l/h):                     
  (macros for both are identicall,                         
   so it's possible to exchange them)                      
                                                           
   #define abc_asOutput()  - initializing gpio as output   
                             and changing state to 'Off'   
                                                           
   #define abc_On()        - changing state of gpio        
                             to turn 'On' actuator         
                                                           
   #define abc_Off()       - changing state of gpio        
                             to turn 'Off' actuator        
                                                           
                                                           
                                                           
active low input with internal pull-up resistor (b):       
                                                           
   #define abc_asInput()   - initializing gpio as input    
                             and turning on pull-up        
                                                           
   #define abc_isActive()  - checking if sensor is active  
                             i. e.:                        
                             if( abc_isActive() ) {code}   
                                                           
   #define abc_isInactive()- checking if sensor is inactive
                                                           
                                                           
*/



//------------------------------------------------------------------------//


#ifdef __cplusplus
  }
#endif

#endif    // GPIODEFS_H
